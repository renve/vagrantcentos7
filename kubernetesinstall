#!/bin/bash

# #this is run on the master node

# setenforce 0
# sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

# #Disable swap to prevent memory allocation issues.
# swapoff -a
# #vim /etc/fstab.orig  ->  Comment out the swap line

# #Enable the br_netfilter module for cluster communication.
# modprobe br_netfilter
# echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

# #all are TCP inbound
# #k8s API server (used by all use in comms.)
# firewall-cmd --permanent --add-port=6443/tcp
# #etcd server client API (used by kube-apiserver, etcd)
# firewall-cmd --permanent --add-port=2379-2380/tcp
# #kubelet API (used by self, control plane)
# firewall-cmd --permanent --add-port=10250/tcp
# #kube-scheduler (used by scheduler)
# firewall-cmd --permanent --add-port=10251/tcp
# #kube-controller-manager (used by controller)
# firewall-cmd --permanent --add-port=10252/tcp

# firewall-cmd --reload

# ################################################
# #worker nodes need only the following ports open for inbound TCP connection

# #used for Kubelet API and control plane
# #firewall-cmd --permanent --add-port=10250/tcp

# #This is used for nodeport services to communicate to all pods
# #Nodeport=30,000-32767 service port=80 target port (container)=80 or 
# #The above example maps the node port to service port and service port to container
# #firewall-cmd --permanent --add-port=30000-32767/tcp
# ################################################


# #Install the Docker prerequisites.
# yum install -y yum-utils device-mapper-persistent-data lvm2

# #Add the Docker repo and install Docker.

# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
# yum install -y docker-ce

# #Conigure the Docker Cgroup Driver to systemd, enable and start Docker
# sed -i '/^ExecStart/ s/$/ --exec-opt native.cgroupdriver=systemd/' /usr/lib/systemd/system/docker.service
# systemctl daemon-reload
# systemctl enable docker --now

# #Add the Kubernetes repo.
# cat <<EOF > /etc/yum.repos.d/kubernetes.repo
# [kubernetes]
# name=Kubernetes
# baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
# sslverify=0
# enabled=1
# gpgcheck=1
# repo_gpgcheck=1
# gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
#        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
# EOF

# #Install Kubernetes.
# yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

# #Enable Kubernetes. The kubelet service will not start until you run kubeadm init.
# systemctl enable --now kubelet

# #Some users on RHEL/CentOS 7 have reported issues with 
# #traffic being routed incorrectly 
# #due to iptables being bypassed. 
# #You should ensure net.bridge.bridge-nf-call-iptables 
# #is set to 1 in your sysctl config. 
# cat <<EOF >  /etc/sysctl.d/k8s.conf
# net.bridge.bridge-nf-call-ip6tables = 1
# net.bridge.bridge-nf-call-iptables = 1
# EOF
# sysctl --system



setenforce 0
sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

#systemctl enable firewalld

#systemctl start firewalld

#Enable the br_netfilter module for cluster communication.
modprobe br_netfilter
sudo echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables /proc/sys/net/bridge/bridge-nf-call-iptables

#Disable swap to prevent memory allocation issues.
swapoff -a
#vim /etc/fstab.orig  ->  Comment out the swap line

#k8s API server (used by all use in comms.)
#firewall-cmd --permanent --add-port=6443/tcp
#etcd server client API (used by kube-apiserver, etcd)
#firewall-cmd --permanent --add-port=2379-2380/tcp
#kubelet API (used by self, control plane)
#firewall-cmd --permanent --add-port=10250/tcp
# #kube-scheduler (used by scheduler)
#firewall-cmd --permanent --add-port=10251/tcp
# #kube-controller-manager (used by controller)
#firewall-cmd --permanent --add-port=10252/tcp
#needed for flannel overlay network see link for specific provider ports
#https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network
#firewall-cmd --permanent --add-port=8285/udp
#firewall-cmd --permanent --add-port=8472/udp
#firewall-cmd --permanent --add-port=30000-32767/tcp
#firewall-cmd --permanent --add-port=30000-32767/udp


#reload firewall configs
#firewall-cmd --reload

#Install the Docker prerequisites.
yum install -y yum-utils device-mapper-persistent-data lvm2

#Add the Docker repo and install Docker.

yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install -y docker-ce

#Conigure the Docker Cgroup Driver to systemd, enable and start Docker
sed -i '/^ExecStart/ s/$/ --exec-opt native.cgroupdriver=systemd/' /usr/lib/systemd/system/docker.service
systemctl daemon-reload
systemctl enable docker --now


#Add the Kubernetes repo.
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
sslverify=0
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

yum update -y

sleep 2

#Install Kubernetes.
yum install -y kubelet kubeadm kubectl

#Enable Kubernetes. The kubelet service will not start until you run kubeadm init.
systemctl enable kubelet

#Conigure the Docker Cgroup Driver to systemd, enable and start Docker
sed -i 's/cgroup-driver=systemd/cgroup-driver=cgroupfs/g' /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf

#Initialize the cluster using the IP range for Flannel.
sudo kubeadm init --apiserver-advertise-address=192.168.1.20 --pod-network-cidr=192.168.1.0/16 --ignore-preflight-errors=all

#Copy the kubeadmin join command.

#Exit sudo and run the following:

#USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)
mkdir -p $USER_HOME/.kube
cp -i /etc/kubernetes/admin.conf $USER_HOME/.kube/config
chown -R $SUDO_UID:$SUDO_UID $USER_HOME/.kube

#Deploy Flannel.
#cd $USER_HOME
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

#go to other nodes and run the command, replace with kubeadm init join command


